/**\n * SPARC Educational Platform API Routes\n * Provides endpoints for playground, assessments, and certification\n */\n\nconst express = require('express');\nconst SPARCPlaygroundEngine = require('../playground/playground-engine');\nconst SPARCAssessmentEngine = require('../certification/assessment-engine');\n\nconst router = express.Router();\nconst playground = new SPARCPlaygroundEngine();\nconst assessment = new SPARCAssessmentEngine();\n\n// Middleware for request logging\nrouter.use((req, res, next) => {\n    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);\n    next();\n});\n\n// Error handling middleware\nconst asyncHandler = (fn) => (req, res, next) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n// ===============================\n// PLAYGROUND ENDPOINTS\n// ===============================\n\n// Create new playground session\nrouter.post('/playground/session', asyncHandler(async (req, res) => {\n    const { userId, skillLevel } = req.body;\n    \n    if (!userId) {\n        return res.status(400).json({ error: 'userId is required' });\n    }\n    \n    const sessionId = playground.createSession(userId, { skillLevel });\n    res.json({ sessionId, message: 'Playground session created successfully' });\n}));\n\n// Execute code in playground\nrouter.post('/playground/execute', asyncHandler(async (req, res) => {\n    const { sessionId, code, step } = req.body;\n    \n    if (!sessionId || !code) {\n        return res.status(400).json({ error: 'sessionId and code are required' });\n    }\n    \n    const result = await playground.executeCode(sessionId, code, step);\n    res.json(result);\n}));\n\n// Get playground session progress\nrouter.get('/playground/progress/:sessionId', (req, res) => {\n    const { sessionId } = req.params;\n    const progress = playground.getSessionProgress(sessionId);\n    \n    if (!progress) {\n        return res.status(404).json({ error: 'Session not found' });\n    }\n    \n    res.json(progress);\n});\n\n// Get available code examples\nrouter.get('/playground/examples', (req, res) => {\n    const examples = playground.getAvailableExamples();\n    res.json({ examples });\n});\n\n// Close playground session\nrouter.delete('/playground/session/:sessionId', (req, res) => {\n    const { sessionId } = req.params;\n    const closed = playground.closeSession(sessionId);\n    \n    if (!closed) {\n        return res.status(404).json({ error: 'Session not found' });\n    }\n    \n    res.json({ message: 'Session closed successfully' });\n});\n\n// ===============================\n// ASSESSMENT ENDPOINTS\n// ===============================\n\n// Create new assessment\nrouter.post('/assessment/create', asyncHandler(async (req, res) => {\n    const { userId, level, options } = req.body;\n    \n    if (!userId || !level) {\n        return res.status(400).json({ error: 'userId and level are required' });\n    }\n    \n    const validLevels = ['practitioner', 'developer', 'architect', 'master'];\n    if (!validLevels.includes(level)) {\n        return res.status(400).json({ error: 'Invalid certification level' });\n    }\n    \n    const assessmentId = assessment.createAssessment(userId, level, options);\n    res.json({ assessmentId, level, message: 'Assessment created successfully' });\n}));\n\n// Start assessment\nrouter.post('/assessment/start/:assessmentId', asyncHandler(async (req, res) => {\n    const { assessmentId } = req.params;\n    \n    const assessmentData = assessment.startAssessment(assessmentId);\n    res.json(assessmentData);\n}));\n\n// Submit assessment response\nrouter.post('/assessment/submit', asyncHandler(async (req, res) => {\n    const { assessmentId, questionId, response } = req.body;\n    \n    if (!assessmentId || !questionId || response === undefined) {\n        return res.status(400).json({ error: 'assessmentId, questionId, and response are required' });\n    }\n    \n    const result = assessment.submitResponse(assessmentId, questionId, response);\n    res.json(result);\n}));\n\n// Complete assessment\nrouter.post('/assessment/complete/:assessmentId', asyncHandler(async (req, res) => {\n    const { assessmentId } = req.params;\n    \n    const result = assessment.completeAssessment(assessmentId);\n    res.json(result);\n}));\n\n// Get assessment progress\nrouter.get('/assessment/progress/:assessmentId', (req, res) => {\n    const { assessmentId } = req.params;\n    const progress = assessment.getAssessmentProgress(assessmentId);\n    \n    if (!progress) {\n        return res.status(404).json({ error: 'Assessment not found' });\n    }\n    \n    res.json(progress);\n});\n\n// ===============================\n// CERTIFICATION ENDPOINTS\n// ===============================\n\n// Verify certificate\nrouter.post('/certificate/verify', (req, res) => {\n    const { certificateId, verificationHash } = req.body;\n    \n    if (!certificateId || !verificationHash) {\n        return res.status(400).json({ error: 'certificateId and verificationHash are required' });\n    }\n    \n    const verification = assessment.verifyCertificate(certificateId, verificationHash);\n    res.json(verification);\n});\n\n// Get user certificates\nrouter.get('/certificate/user/:userId', (req, res) => {\n    const { userId } = req.params;\n    const certificates = assessment.getUserCertificates(userId);\n    res.json({ certificates });\n});\n\n// Get assessment statistics\nrouter.get('/statistics/assessments', (req, res) => {\n    const stats = assessment.getAssessmentStatistics();\n    res.json(stats);\n});\n\n// ===============================\n// HEALTH CHECK ENDPOINTS\n// ===============================\n\nrouter.get('/health', (req, res) => {\n    res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        version: '1.0.0',\n        services: {\n            playground: 'active',\n            assessment: 'active',\n            certification: 'active'\n        }\n    });\n});\n\n// ===============================\n// ERROR HANDLING\n// ===============================\n\nrouter.use((error, req, res, next) => {\n    console.error('API Error:', error);\n    \n    if (error.message.includes('not found')) {\n        return res.status(404).json({ error: error.message });\n    }\n    \n    if (error.message.includes('required') || error.message.includes('Invalid')) {\n        return res.status(400).json({ error: error.message });\n    }\n    \n    res.status(500).json({ \n        error: 'Internal server error',\n        message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'\n    });\n});\n\n// Set up real-time event listeners\nplayground.on('sessionCreated', (data) => {\n    console.log('Playground session created:', data.sessionId);\n});\n\nplayground.on('codeExecuted', (data) => {\n    console.log('Code executed in session:', data.sessionId, 'Step:', data.step);\n});\n\nassessment.on('assessmentCreated', (data) => {\n    console.log('Assessment created:', data.assessmentId, 'Level:', data.level);\n});\n\nassessment.on('certificateGenerated', (data) => {\n    console.log('Certificate generated:', data.id, 'Level:', data.level);\n});\n\nmodule.exports = router;\n